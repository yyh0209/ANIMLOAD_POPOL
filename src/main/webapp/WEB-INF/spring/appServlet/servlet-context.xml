<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
<<<<<<< HEAD
<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<context:property-placeholder location="classpath:config.properties"/>
	<!-- 빈 등록!! 핸들러매퍼를 만들기위한 정보를 만드는곳-->
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<!-- 컨트롤러가 매핑하는 과정에서 빈등록을 판단하는역할. 일종의 컨트롤러붙은 것은 매핑담당
	리퀘스트 매핑은 여기에다 써라. 없으면 controller가 없다고 보면된다. -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/res/**" location="/resources/" />
	<!-- 스테틱폴더를 만드는 담당. res폴더로 접근하는 역할이 이 폴더로 가라는 역할.
	주소값으로 가는것은 전부 resource로 가는 역할.
	매핑,로케이션 순으로 찾는다. **은 "몇단계 혹은 어떤 이름이든"이라는 똣이다. -->
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<context:component-scan base-package="com.mediadchive.animation" />
	<beans:bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	    <beans:property name="poolName" value="springHikariCP" />
	    <beans:property name="connectionTestQuery" value="SELECT 1 FROM DUAL" />
	    <beans:property name="driverClassName" value="${db.driver}" />
	    <beans:property name="maximumPoolSize" value="10" />
	    <beans:property name="idleTimeout" value="5000" />

	    <beans:property name="jdbcUrl" value="${db.url}"/>
		<beans:property name="username" value="${db.username}"/>
		<beans:property name="password" value="${db.password}"/> 
	</beans:bean>
	
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="configLocation" value="/WEB-INF/spring/mybatis-alias.xml"/>
	</beans:bean>
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- max upload size in bytes -->
        <beans:property name="maxUploadSize" value="5242880" /> <!-- 5MB -->
    </beans:bean>
=======

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.koreanindie.animation" />
	
	
	
>>>>>>> branch 'master' of https://github.com/yyh0209/ANIMLOAD_POPOL.git
</beans:beans>
